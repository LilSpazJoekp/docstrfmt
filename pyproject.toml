[build-system]
build-backend = "flit_core.buildapi"
requires = ["flit_core >=3.4,<4"]

[project]
authors = [{name = "Joel Payne", email = "lilspazjoekp@gmail.com"}]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python",
  "Topic :: Documentation",
  "Topic :: Documentation :: Sphinx",
  "Topic :: Software Development :: Documentation",
  "Topic :: Utilities"
]
dependencies = [
  "black==24.*",
  "click==8.*",
  "docutils==0.20.*",
  "libcst==1.*",
  "platformdirs==4.*",
  "sphinx>=7,<9",
  "tabulate==0.9.*",
  "toml==0.10.*"
]
dynamic = ["version", "description"]
keywords = ["black", "docutils", "autoformatter", "formatter", "lint", "restructuredtext", "rst", "sphinx"]
license = {file = "LICENSE.txt"}
maintainers = [{name = "Joel Payne", email = "lilspazjoekp@gmail.com"}]
name = "docstrfmt"
readme = "README.rst"
requires-python = ">=3.8,<4"

[project.optional-dependencies]
ci = ["coveralls"]
d = [
  "aiohttp==3.*"
]
dev = [
  "packaging",
  "docstrfmt[lint]",
  "docstrfmt[test]"
]
lint = [
  "pre-commit",
  "ruff >=0.0.292"
]
test = [
  "pytest",
  "pytest-aiohttp"
]

[project.scripts]
docstrfmt = "docstrfmt.main:main"
docstrfmtd = "docstrfmt.server:main [d]"

[project.urls]
"Issue Tracker" = "https://github.com/LilSpazJoekp/docstfmt/issues"
"Source Code" = "https://github.com/LilSpazJoekp/docstfmt"

[tool.black]
extend_exclude = '/(\.venv.*)/'
line-length = 88

[tool.docstrfmt]
extend_exclude = ["tests/test_files/error_files/*"]

[tool.isort]
profile = "black"

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"
filterwarnings = "ignore::DeprecationWarning"
testpaths = "tests"

[tool.ruff]
include = [
  "docstrfmt/**/*.py"
]
target-version = "py38"

[tool.ruff.lint]
ignore = [
  "A002", # shadowing built-in
  "ANN101", # missing type annotation for self in method
  "ANN102", # missing type annotation for cls in classmethod
  "ANN202", # missing return type for private method
  "ANN401", # typing.Any usage
  "ASYNC109", # Async function definition with a `timeout` parameter
  "D203", # 1 blank line required before class docstring
  "D213", # Multi-line docstring summary should start at the second line
  "E501", # line-length
  "N818", # exception name should be named with an Error suffix
  "PLR0913", # too many arguments
  "PLR2004", # Magic value used in comparison,
  "S101", # use of assert
  "TD003", # Missing issue link on the line following this TODO
  "FIX002", # Line contains TODO
  "G004" # Logging statement uses string formatting
]
select = [
  "A", # flake8-builtins
  "ANN", # flake8-annotations
  "ASYNC", # flake8-async
  "ARG", # flake8-unused-arguments
  "B", # flake8-bugbear
  "BLE", # flake8-blind-except
  "C4", # flake8-comprehensions
  "D", # pydocstyle
  "DTZ", # flake8-datetimez
  "E", # pycodestyle errors
  "EM", # flake8-errmsg
  "ERA", # eradicate
  "EXE", # flake8-executable
  "F", # pyflakes
  "FA", # flake8-future-annotations
  "FIX", # flake8-fix me
  "FLY", # flynt
  "G", # flake8-logging-format
  "I", # isort
  "INP", # flake8-no-pep420
  "ISC", # flake8-implicit-str-concat
  "N", # pep8-naming
  "PIE", # flake8-pie
  "PGH", # pygrep-hooks
  "PL", # Pylint
  "PT", # flake8-pytest-style
  "PYI", # flake8-pyi
  "Q", # flake8-quotes
  "RET", # flake8-return
  "RSE", # flake8-raise
  "S", # bandit
  "SIM", # flake8-simplify
  "T10", # flake8-debugger
  "T20", # flake8-print
  "TCH", # flake8-type-checking
  "TD", # flake8-todos
  "W", # pycodestyle warnings
  "UP" # pyupgrade
]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
mypy-init-return = true
suppress-dummy-args = true
suppress-none-returning = true

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"docstrfmt/docstrfmt.py" = ["ARG002", "D101", "D102", "D103", "D107", "ERA001", "N802", "PLR0912", "PLR0915"]
